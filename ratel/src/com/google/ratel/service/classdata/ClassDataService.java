package com.google.ratel.service.classdata;

import com.google.ratel.*;
import java.util.*;
import java.util.Map;
import javax.servlet.ServletContext;
import com.google.ratel.util.ClassPathScanner;
import com.google.ratel.util.RatelUtils;
import com.google.ratel.core.RatelService;
import com.google.ratel.deps.io.*;
import com.google.ratel.service.json.*;
import java.io.*;
import java.util.logging.*;

public class ClassDataService {

    protected Map<String, ClassData> serviceByPathMap;

    protected ServletContext servletContext;

    protected RatelConfig ratelConfig;

    protected List<String> packageNames;

    public ClassDataService(RatelConfig ratelConfig, List<String> packageNames) {
        this.packageNames = packageNames;
        this.ratelConfig = ratelConfig;
        this.servletContext = ratelConfig.getServletContext();
    }

    public Map<String, ClassData> getAllServiceClassData() {
        // TODO add the data to the runtime
        if (serviceByPathMap == null) {
            Map tempClassDataMap = new HashMap<String, ClassData>();

            Set<Class> classes = new HashSet<Class>();

            // Retrieve data from file that was generated by ANT. This is for environments where WAR is not unpacked
            InputStream stream = servletContext.getResourceAsStream("/META-INF/resources/classdata.json");
            if (stream != null) {
                try {
                    String json = IOUtils.toString(stream);
                    JsonService jsonService = ratelConfig.getJsonService();
                    Set<String> classSet = jsonService.fromJson(json, Set.class);
                    for (String name : classSet) {
                        Class cls = RatelUtils.classForName(name, ratelConfig.getLogService());
                        classes.add(cls);
                    }
                } catch (IOException ex) {
                    Logger.getLogger(ClassDataService.class.getName()).log(Level.SEVERE, null, ex);

                } finally {
                    IOUtils.closeQuietly(stream);
                }

            } else {
                ClassPathScanner scanner = new ClassPathScanner(servletContext, RatelService.class, packageNames);
                classes = scanner.scan();
            }

            for (Class serviceClass : classes) {

                ClassData classData = RatelUtils.createClassData(serviceClass, packageNames);

                RatelUtils.populateMethods(classData);

                if (ratelConfig.getLogService().isDebugEnabled()) {
                    String msg = classData.getServicePath() + " -> " + serviceClass.getName();
                    ratelConfig.getLogService().debug(msg);
                }

                tempClassDataMap.put(classData.getServicePath(), classData);
            }

            serviceByPathMap = tempClassDataMap;
        }
        return serviceByPathMap;
    }
}
